import { Uuid } from "../../Shared/src/ValueObject/Objects/Uuid";
import { Operation } from "./Entity/Operation";
import { ApprovalQueue } from "./Entity/ApprovalQueue";
import { History } from "./Entity/History";
import { BaseEntity } from "../../Shared/src/BaseEntity";
import { ConfigItem } from "./Entity/ConfigItem";
import { WorkGroup } from "./Entity/Workgroup";
import { Attribute } from "./Entity/Attribute";
import { TokenData } from "../User/ValueObject/TokenData";
import { ApproveData } from "./ValueObject/ApproveData";
import { Process } from "./Entity/Process";
import { Subprocess } from "./Entity/Subprocess";
export declare class Tnk extends BaseEntity<Uuid> {
    get configItems(): ConfigItem[];
    set configItems(value: ConfigItem[]);
    get workGroups(): WorkGroup[];
    set workGroups(value: WorkGroup[]);
    get operations(): Operation[];
    set operations(value: Operation[]);
    get history(): History[];
    set history(value: History[]);
    get approvalQueue(): ApprovalQueue[];
    set approvalQueue(value: ApprovalQueue[]);
    get process(): Process;
    set process(value: Process);
    get isDigital(): boolean;
    set isDigital(value: boolean);
    get isActive(): boolean;
    set isActive(value: boolean);
    get subprocess(): Subprocess;
    set subprocess(value: Subprocess);
    get title(): string;
    set title(value: string);
    get isAutomated(): string;
    set isAutomated(value: string);
    get statusId(): number;
    set statusId(value: number);
    get type(): string;
    set type(value: string);
    private _title;
    private _process;
    private _subprocess;
    private _isActive;
    private _isDigital;
    private _isAutomated;
    private _statusId;
    private _type;
    private _configItems;
    private _workGroups;
    private _operations;
    private _history;
    private _approvalQueue;
    constructor(tnk?: Tnk);
    addConfigurationItem(configItem: ConfigItem): Promise<number | Error>;
    addWorkGroup(workGroup: WorkGroup): Promise<number | Error>;
    addOperation(operation: Operation): Promise<number | Error>;
    addAttribute(attribute: Attribute): Promise<number | Error>;
    approve(user: TokenData, dto: ApproveData): Promise<number | Error>;
    getTnkToApprove(user: TokenData): Promise<number | Error>;
}
